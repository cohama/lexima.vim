Describe In commandline mode,

  Before each
    call lexima#clear_rules()
  End

  It works well on any commandline mode if mode is c
    call lexima#add_rule({'char': '(', 'at': 'hoge\%#', 'input': '{', 'input_after': '}', 'mode': 'c'})
    call lexima#add_rule({'char': '<BS>', 'at': '{\%#}', 'input': '<BS><Del>', 'mode': 'c'})
    call Expect(CmdlineInput(":(")).to_change_cmdline_as("(")
    call Expect(CmdlineInput(":hoge((")).to_change_cmdline_as("hoge{(}")
    call Expect(CmdlineInput("/hoge((")).to_change_cmdline_as("hoge{(}")
    call Expect(CmdlineInput("?hoge((")).to_change_cmdline_as("hoge{(}")
    call Expect(CmdlineInput(":hoge(\<BS>")).to_change_cmdline_as("hoge")
  End

  It works well with complex regex pattern
    call lexima#add_rule({'char': '(', 'at': 'hoge\%#', 'input': '{', 'input_after': '}', 'mode': 'c'})
    call lexima#add_rule({'char': '(', 'at': 'hoge{\%#}', 'input': 'fuga', 'input_after': 'piyo', 'mode': 'c'})
    call lexima#add_rule({'char': '$', 'at': 'hoge\%#', 'input': '$', 'input_after': '$', 'mode': 'c'})
    call lexima#add_rule({'char': '{', 'at': '\V\(hoge\)$\%#$', 'input': '<BS><Del>', 'mode': 'c'})
    call Expect(CmdlineInput(":(")).to_change_cmdline_as("(")
    call Expect(CmdlineInput(":hoge(")).to_change_cmdline_as("hoge{}")
    call Expect(CmdlineInput(":hoge((")).to_change_cmdline_as("hoge{fugapiyo}")
    call Expect(CmdlineInput(":hoge$")).to_change_cmdline_as("hoge$$")
    call Expect(CmdlineInput(":hoge${")).to_change_cmdline_as("hoge")
  End

  It works well when special key is input
    call lexima#add_rule({'at': '^\%#', 'char': '/', 'input': '<BS>:Unite line', 'mode': '/'})
    call Expect(CmdlineInput("//")).to_change_cmdline_as("Unite line")
  End

  It works well on forward search mode if mode is /
    call lexima#add_rule({'char': '(', 'at': 'hoge\%#', 'input': '{', 'input_after': '}', 'mode': '/'})
    call Expect(CmdlineInput(":hoge((")).to_change_cmdline_as("hoge((")
    call Expect(CmdlineInput("/hoge((")).to_change_cmdline_as("hoge{(}")
    call Expect(CmdlineInput("?hoge((")).to_change_cmdline_as("hoge((")
  End

  It works well on backward search mode if mode is ?
    call lexima#add_rule({'char': '(', 'at': 'hoge\%#', 'input': '{', 'input_after': '}', 'mode': '?'})
    call Expect(CmdlineInput(":hoge((")).to_change_cmdline_as("hoge((")
    call Expect(CmdlineInput("/hoge((")).to_change_cmdline_as("hoge((")
    call Expect(CmdlineInput("?hoge((")).to_change_cmdline_as("hoge{(}")
  End

  It works well on search mode if mode is /?
    call lexima#add_rule({'char': '(', 'at': 'hoge\%#', 'input': '{', 'input_after': '}', 'mode': '/?'})
    call Expect(CmdlineInput(":hoge((")).to_change_cmdline_as("hoge((")
    call Expect(CmdlineInput("/hoge((")).to_change_cmdline_as("hoge{(}")
    call Expect(CmdlineInput("?hoge((")).to_change_cmdline_as("hoge{(}")
  End

  It does not affect on insertmode
    call lexima#add_rule({'char': '(', 'at': 'hoge\%#', 'input': '{', 'input_after': '}', 'mode': ':/?'})
    %delete _
    execute "normal ihoge(\<Esc>"
    call Expect(['hoge(']).to_be_displayed()
  End

  It can leave
    call lexima#add_rule({'char': '(', 'input_after': ')', 'mode': 'c'})
    call lexima#add_rule({'char': ')', 'at': '\%#)', 'leave': 1, 'mode': 'c'})
    call lexima#add_rule({'char': '<Space>', 'at': '(\%#)', 'input_after': '<Space>', 'mode': 'c'})
    call lexima#add_rule({'char': ')', 'at': '\%# )', 'leave': ')', 'mode': 'c'})
    call Expect(CmdlineInput(":hoge(:);")).to_change_cmdline_as("hoge(:);")
    call Expect(CmdlineInput(":hoge( :);")).to_change_cmdline_as("hoge( : );")
  End

  It can leave at the same time as input
    call lexima#add_rule({'char': '(', 'input_after': ')', 'mode': 'c'})
    call lexima#add_rule({'char': ';', 'at': '(\%#)', 'leave': ')', 'input': ';', 'mode': 'c'})
    call lexima#add_rule({'char': '#', 'at': '(\%#)', 'leave': ')', 'input_after': '#', 'mode': 'c'})
    call Expect(CmdlineInput(":hoge(;ok")).to_change_cmdline_as("hoge();ok")
    call Expect(CmdlineInput(":hoge(#ok")).to_change_cmdline_as("hoge()ok#")
  End

  It can delete
    call lexima#add_rule({'char': '(', 'input_after': ')', 'mode': 'c'})
    call lexima#add_rule({'char': '<BS>', 'at': '(\%#)', 'delete': 1, 'mode': 'c'})
    call Expect(CmdlineInput(":(")).to_change_cmdline_as('()')
    call Expect(CmdlineInput(":(\<BS>")).to_change_cmdline_as('')
  End

  Context altanative keys

    It can be defined
      call lexima#add_rule({'char': '(', 'input_after': ')', 'mode': 'c'})
      call lexima#add_rule({'char': '<BS>', 'at': '(\%#)', 'delete': 1, 'mode': 'c'})
      call lexima#cmdmode#define_altanative_key('<C-h>', '<BS>')
      call Expect(CmdlineInput(":(")).to_change_cmdline_as('()')
      call Expect(CmdlineInput(":(\<C-h>")).to_change_cmdline_as('')
    End

  End

  Context abbreviation expansion

    Before each
      cabbrev hoge fuga
      call lexima#clear_rules()
      call lexima#add_rule({'char': '(', 'at': '\%#', 'input': '(', 'input_after': ')', 'mode': 'c'})
    End

    After each
      cunabbrev hoge
      call lexima#clear_rules()
    End

    It can be triggered after key pressed
      call Expect(CmdlineInput(':hoge ')).to_change_cmdline_as('fuga ')
      call Expect(CmdlineInput(':hoge(')).to_change_cmdline_as('fuga()')
      call Expect(CmdlineInput(":hoge'")).to_change_cmdline_as("fuga'")
    End

    It disabled by g:lexima_disable_abbrev_trigger
      call Expect(CmdlineInput(':hoge(')).to_change_cmdline_as('fuga()')
      let g:lexima_disable_abbrev_trigger = 1
      call Expect(CmdlineInput(':hoge(')).to_change_cmdline_as('hoge()')
      let g:lexima_disable_abbrev_trigger = 0
    End

  End

  Context auto mapping disabled

    Before each
      let g:lexima_disable_auto_mapping = 1
      call lexima#clear_rules()
      call lexima#add_rule({'char': '(', 'at': '\%#', 'input': '(', 'input_after': ')', 'mode': 'c'})
      call lexima#add_rule({'char': '{', 'at': '\%#', 'input': '{', 'input_after': '}', 'mode': 'c'})
    End

    After each
      let g:lexima_disable_auto_mapping = 0
    End

    It is disabled mapping when g:lexima_disable_auto_mapping = 1
      call Expect(CmdlineInput(':hoge({')).to_change_cmdline_as('hoge({')
      cnoremap <expr> ( lexima#expand('(', ':')
      call Expect(CmdlineInput(':hoge({')).to_change_cmdline_as('hoge({)')
      cnoremap <expr> { lexima#expand('{', ':')
      call Expect(CmdlineInput(':hoge({')).to_change_cmdline_as('hoge({})')
    End
  End

End
