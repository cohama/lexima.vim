call themis#helper('command')
Describe In insert mode,

  Before all
    set backspace=indent,start,eol
    new | only!
  End

  After each
    new | only!
  End

  Context more complex rules

    Before each
      setlocal nocindent smartindent sw=2 ts=2 sts=2 et
      call lexima#clear_rules()
    End

    Context new line with extra chars

      Before each
        call lexima#clear_rules()
        call lexima#add_rule({'char': '{', 'input_after': '}'})
        call lexima#add_rule({'char': '<Space>', 'at': '{\%#}', 'input': '<Space>', 'input_after': '<Space>'})
        call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input': '<CR>\<Space>', 'input_after': ',<CR>\'})
        call lexima#add_rule({'char': '<CR>', 'at': '{ \%# }', 'input': '<BS><CR>\<Space>', 'input_after': ',<CR>\', 'delete': 1})
        set ft=vim
      End

      It can input correctly
        execute "normal olet a = {\<CR>\<Esc>"
        call Expect(['', 'let a = {', '      \ ,', '      \}']).to_be_displayed()
        %delete
        execute "normal olet a = { \<CR>\<Esc>"
        call Expect(['', 'let a = {', '      \ ,', '      \}']).to_be_displayed()
      End

      It is dot-repeatable
        execute "normal olet a = { \<CR>\<Esc>"
        execute "normal G."
        call Expect(['', 'let a = {', '      \ ,', '      \}', 'let a = {', '      \ ,', '      \}']).to_be_displayed()
      End

    End
  End

  Context leave rules

    Before each
      setlocal nocindent smartindent
      call lexima#clear_rules()
      call lexima#add_rule({'char': '{', 'input_after': '}'})
      call lexima#add_rule({'char': '*', 'at': '{\%#}', 'input_after': '*'})
    End

    It can leave one
      call lexima#add_rule({'char': '*', 'at': '\%#\*}', 'leave': 1})
      execute "normal i{**;\<Esc>"
      call Expect(['{**;}']).to_be_displayed()
    End

    It can leave two
      call lexima#add_rule({'char': '}', 'at': '\%#\*}', 'leave': 2})
      execute "normal i{*};\<Esc>"
      call Expect(['{**};']).to_be_displayed()
    End

    It can leave till specified char
      call lexima#add_rule({'char': '}', 'at': '\%#\*}', 'leave': '}'})
      execute "normal i{*};\<Esc>"
      call Expect(['{**};']).to_be_displayed()
    End

    It can leave one over cr
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input_after': '<CR>'})
      call lexima#add_rule({'char': '}', 'leave': 1})
      execute "normal i{\<CR>;}a\<CR>\<Esc>"
      call Expect(['{', "\t;", "\ta", '}']).to_be_displayed()
    End

    It can leave two over cr
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input_after': '<CR>'})
      call lexima#add_rule({'char': '}', 'leave': 2})
      execute "normal i{\<CR>;}a\<CR>\<Esc>"
      call Expect(['{', "\t;", '}a', '']).to_be_displayed()
    End

    It can leave till specified char over cr
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input_after': '<CR>'})
      call lexima#add_rule({'char': '}', 'leave': '}'})
      execute "normal i{\<CR>;}\<Esc>"
      call Expect(['{', "\t;", '}']).to_be_displayed()
    End

    It can leave till specified char over cr (more complex case)
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input_after': '<CR>'})
      call lexima#add_rule({'char': '}', 'leave': '}'})
      execute "normal o{\<CR>{\<CR>hoge{}}\<Esc>"
      normal! G.
      call Expect(['', '{', "\t{", "\t\thoge{}", "\t}", '}', '{', "\t{", "\t\thoge{}", "\t}", '}']).to_be_displayed()
    End

    It can leave till end of line
      call lexima#add_rule({'char': '"', 'input_after': '"'})
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input_after': '<CR>'})
      call lexima#add_rule({'char': '}', 'leave': '}'})
      execute "normal o{\<CR>{\<CR>hoge{\"foo{\<C-r>=lexima#insmode#leave_till_eol('')\<CR>;\<Esc>"
      call Expect(['', '{', "\t{", "\t\thoge{\"foo{}\"};", "\t}", '}']).to_be_displayed()
      normal! G.
      call Expect(['', '{', "\t{", "\t\thoge{\"foo{}\"};", "\t}", '}', '{', "\t{", "\t\thoge{\"foo{}\"};", "\t}", '}']).to_be_displayed()
    End

    It can use at the same time as input
      call lexima#add_rule({'char': '(', 'input_after': ')'})
      call lexima#add_rule({'char': ';', 'at': '(\%#)', 'leave': ')', 'input': ';'})
      call lexima#add_rule({'char': '#', 'at': '(\%#)', 'leave': ')', 'input_after': '#'})
      execute "normal ofoo(;ok\<Esc>G."
      call Expect(['', 'foo();ok', 'foo();ok']).to_be_displayed()
      %delete
      execute "normal ofoo(#ok\<Esc>G."
      call Expect(['', 'foo()ok#', 'foo()ok#']).to_be_displayed()
    End

  End

  Context except rules

    Before each
      new
      only!
      setlocal filetype=ruby
      setlocal noexpandtab tabstop=4 softtabstop=4 shiftwidth=4

      call lexima#clear_rules()
      let except = '^\(\s*\).\+\n\%(\1\s.*\n\)*\1}'
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#', 'input': '<CR>', 'input_after': '<CR>}', 'except': except})
    End

    It can except applying the rule by cursor context
      let lines = ["\tloop {", "\t\tfoo", "\t}"]
      put =lines
      1delete _
      execute "normal ggA\<CR>bar\<Esc>"
      call Expect(["\tloop {", "\t\tbar", "\t\tfoo", "\t}"]).to_be_displayed()
    End

    It works on normal situation
      let lines = ["\tloop {"]
      put =lines
      1delete _
      execute "normal ggA\<CR>bar\<Esc>"
      call Expect(["\tloop {", "\t\tbar", "\t}"]).to_be_displayed()
    End

  End

  Context delete rules

    Before each
      new
      only!
      setlocal nocindent smartindent
      call lexima#clear_rules()
    End

    It can delete one character
      call lexima#add_rule({'char': '(', 'input_after': ')'})
      call lexima#add_rule({'char': '<BS>', 'at': '(\%#)', 'delete': 1})
      call lexima#add_rule({'char': '<BS>', 'at': '{{\%#}}', 'delete': 2})
      execute "normal ohoge(\<BS>\<Esc>"
      call Expect(['', 'hoge']).to_be_displayed()
      normal .
      call Expect(['', 'hoge', 'hoge']).to_be_displayed()
    End

    It can delete many characters
      call lexima#add_rule({'char': '{', 'input_after': '}'})
      call lexima#add_rule({'char': '<BS>', 'at': '{{\%#}}', 'input': '<BS><BS>', 'delete': 2})
      execute "normal ofoo{{\<BS>\<Esc>"
      call Expect(['', 'foo']).to_be_displayed()
      normal .
      call Expect(['', 'foo', 'foo']).to_be_displayed()
    End

    It can delete exsiting characters
      let lines = ["foo {{}}"]
      put =lines
      1delete _
      call lexima#add_rule({'char': '<BS>', 'at': '{{\%#}}', 'input': '<BS><BS>', 'delete': 2})
      execute "normal 0f}i\<BS>\<Esc>"
      call Expect(['foo ']).to_be_displayed()
    End

    It can delete till specified char
      call lexima#add_rule({'char': '{', 'input_after': '}'})
      call lexima#add_rule({'char': '<Space>', 'at': '{\%#}', 'input': '<Space>', 'input_after': '<Space>'})
      call lexima#add_rule({'char': '<BS>', 'at': '{ \%# }', 'input': '<BS><BS>', 'delete': '}'})
      execute "normal ifoo { \<BS>\<Esc>"
      call Expect(['foo ']).to_be_displayed()
    End

    It can delete till end of line
      let lines = ["ABCD"]
      put =lines
      1delete _
      call lexima#add_rule({'char': '{', 'input_after': '}'})
      call lexima#add_rule({'char': '(', 'input_after': ')'})
      execute "normal fBa foo {({\<C-r>=lexima#insmode#delete_till_eol('')\<CR>\<Esc>"
      call Expect(['AB foo {({CD']).to_be_displayed()
    End

    It can delete all
      call lexima#add_rule({'char': '{', 'input_after': '}'})
      call lexima#add_rule({'char': '<CR>', 'at': '{\%#}', 'input_after': '<CR>'})
      execute "normal ifoo {\<CR>bar {\<CR>\<C-r>=lexima#insmode#delete_all('')\<CR>\<Esc>"
      call Expect(['foo {', "\tbar {", ""]).to_be_displayed()
    End

    It can use at the same time as input
      call lexima#add_rule({'char': '(', 'input_after': ')'})
      call lexima#add_rule({'char': '>', 'at': '(\%#)', 'delete': ')', 'input': '<BS><LT>', 'input_after': '>'})
      execute "normal ofoo(>ok\<Esc>G."
      call Expect(['', 'foo<ok>', 'foo<ok>']).to_be_displayed()
    End

  End

  Context filetype rules

    Before all
      call lexima#clear_rules()
      let s:save_default_rules = g:lexima#default_rules
      let g:lexima_no_default_rules = 1
      call lexima#add_rule({'char': '(', 'input_after': ')'})
      call lexima#add_rule({'char': '(', 'input_after': 'Ruby!)', 'filetype': 'ruby'})
      call lexima#add_rule({'char': '(', 'input_after': 'Java script?)', 'filetype': 'javascript'})
    End

    It is triggered in suitable filetype
      execute "normal i(\<Esc>"
      call Expect(['()']).to_be_displayed()
      enew!
      setlocal filetype=ruby
      execute "normal i(\<Esc>"
      call Expect(['(Ruby!)']).to_be_displayed()
      enew!
      setlocal filetype=javascript
      execute "normal i(\<Esc>"
      call Expect(['(Java script?)']).to_be_displayed()
    End

    It falls back to default rule
      setlocal filetype=ocaml
      execute "normal i(\<Esc>"
      call Expect(['()']).to_be_displayed()
    End

  End

  Context syntax rules

    Before all
      call lexima#clear_rules()
      let s:save_default_rules = g:lexima#default_rules
      let g:lexima_no_default_rules = 1
      call lexima#add_rule({'char': '"', 'input_after': '"'})
      call lexima#add_rule({'char': '%', 'input': '%%', 'syntax': 'String'})
      setlocal filetype=vim
    End

    It is triggered in suitable syntax
      execute "normal ilet x = %\"%\<Esc>"
      call Expect(['let x = %"%%"']).to_be_displayed()
    End

  End

  Context altanative keys

    It can be defined
      call lexima#add_rule({'char': '(', 'input_after': ')'})
      call lexima#add_rule({'char': '<BS>', 'at': '(\%#)', 'delete': 1})
      call lexima#insmode#define_altanative_key('<C-h>', '<BS>')
      call Expect("(").to_change_input_as('()')
      call Expect("(\<C-h>").to_change_input_as('')
    End

  End

  Context map pre-hook

    Before all
      call lexima#set_default_rules()
    End

    It can be triggered before key pressed
      call lexima#insmode#map_hook('before', '(', '*')
      call Expect("(").to_change_input_as('*()')
      call lexima#insmode#map_hook('before', '[', "\<C-r>=1+1\<CR>")
      call Expect("[").to_change_input_as('2[]')
    End

  End

  Context map post-hook

    Before all
      call lexima#set_default_rules()
    End

    It can be triggered after key pressed
      call lexima#insmode#map_hook('after', '(', '+')
      call Expect("(").to_change_input_as('(+)')
      call lexima#insmode#map_hook('after', '[', "\<C-r>=1+2\<CR>")
      call Expect("[").to_change_input_as('[3]')
    End

  End

  Context abbreviation expansion

    Before all
      iabbrev foo bar
      call lexima#set_default_rules()
    End

    After all
      iunabbrev foo
    End

    It can be triggered after key pressed
      if v:version <= 703 && !has('patch489')
        Skip "abbreviation expansion is enabled at Vim 7.3.489 or later"
      endif
      call Expect('foo ').to_change_input_as('bar ')
      call Expect('foo(').to_change_input_as('bar()')
      call Expect("foo'").to_change_input_as("bar'")
      call Expect("foo\<CR>").to_change_input_as("bar\n")
    End

    It disabled by g:lexima_disable_abbrev_trigger
      call Expect('foo(').to_change_input_as('bar()')
      let g:lexima_disable_abbrev_trigger = 1
      call Expect('foo(').to_change_input_as('foo()')
      let g:lexima_disable_abbrev_trigger = 0
    End

    It disabled by b:lexima_disable_abbrev_trigger
      call Expect('foo(').to_change_input_as('bar()')
      let b:lexima_disable_abbrev_trigger = 1
      call Expect('foo(').to_change_input_as('foo()')
    End

  End

  Context with submatch

    Before each
      call lexima#clear_rules()
    End

    It can be used with simple rule
      call lexima#add_rule({'char': 'b', 'at': '\(a\+\)\%#', 'input_after': '\1', 'with_submatch': 1 })
      execute "normal ibab\<Esc>"
      call Expect(['baba']).to_be_displayed()
    End

    It can be used on html tag
      set ft=html
      call lexima#add_rule({'char': '<', 'input_after': '>'})
      call lexima#add_rule({'char': '>', 'at': '<\(\w\+\)\%#>', 'leave': 1, 'input_after': '</\1>', 'with_submatch': 1})
      call Expect('<div>').to_change_input_as('<div></div>')
      call Expect('<html><div>').to_change_input_as('<html><div></div></html>')
    End

    It can be used on tex
      set ft=tex
      set expandtab shiftwidth=2
      call lexima#add_rule({
      \ 'filetype': 'tex',
      \ 'char': '<CR>',
      \ 'input': '<CR>',
      \ 'input_after': '<CR>\\end{\1}',
      \ 'at': '^.*\\begin{\([^}]*\)}\(\[.*\]\)*\%#$',
      \ 'with_submatch': 1,
      \ })
      execute "normal o\\begin{equation}\<CR>\<Esc>"
      call Expect([
      \ '',
      \ '\begin{equation}',
      \ '',
      \ '\end{equation}']).to_be_displayed()
      normal! G.
      call Expect([
      \ '',
      \ '\begin{equation}',
      \ '',
      \ '\end{equation}',
      \ '\begin{equation}',
      \ '',
      \ '\end{equation}']).to_be_displayed()
      %delete _
      execute "normal i\\begin{foo}\<CR>\\begin{bar}\<CR>\<Esc>"
      call Expect([
      \ '\begin{foo}',
      \ '  \begin{bar}',
      \ '',
      \ '  \end{bar}',
      \ '\end{foo}']).to_be_displayed()
    End

  End

  Context auto mapping disabled

    Before each
      let g:lexima_disable_auto_mapping = 1
      call lexima#clear_rules()
      call lexima#set_default_rules()
    End

    After each
      let g:lexima_disable_auto_mapping = 0
    End

    It is disabled mapping when g:lexima_disable_auto_mapping = 1
      call Expect('hoge({').to_change_input_as('hoge({')
      inoremap <expr> ( lexima#expand('(', 'i')
      call Expect('hoge({').to_change_input_as('hoge({)')
      inoremap <expr> { lexima#expand('{', 'i')
      call Expect('hoge({').to_change_input_as('hoge({})')
    End
  End

End
