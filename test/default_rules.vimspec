Describe default rule

  Before all
    call lexima#set_default_rules()
    new | only!
  End

  After each
    let g:lexima_disable_on_nofile = 0
    let g:lexima_disable_auto_mapping = 0
    new | only!
  End

  It should input the closing pair when opening pair is input
    call Expect('(').to_change_input_as('()')
    call Expect('\(').to_change_input_as('\(')
    call Expect('[').to_change_input_as('[]')
    call Expect('\[').to_change_input_as('\[')
    call Expect('{').to_change_input_as('{}')
    call Expect('"').to_change_input_as('""')
    call Expect('\"').to_change_input_as('\"')
    call Expect('"""').to_change_input_as('""""""')
    call Expect("'").to_change_input_as("''")
    call Expect("\\'").to_change_input_as("\\'")
    call Expect("'''").to_change_input_as("''''''")
    call Expect('`').to_change_input_as('``')
    call Expect('```').to_change_input_as('``````')
    call Expect("I'm").to_change_input_as("I'm")
    call Expect("(\<CR>").to_change_input_as("(\n\n)")
    call Expect("{\<CR>").to_change_input_as("{\n\n}")
  End

  It should leave the closing pair when closing pair is input
    call Expect('()').to_change_input_as('()')
    call Expect('[]').to_change_input_as('[]')
    call Expect('{}').to_change_input_as('{}')
    call Expect('""').to_change_input_as('""')
    call Expect('"""";').to_change_input_as('"""""";')
    call Expect("''").to_change_input_as("''")
    call Expect("'''';").to_change_input_as("'''''';")
    call Expect('``').to_change_input_as('``')
    call Expect('````;').to_change_input_as('``````;')
  End

  It should delete the pairs when backspace is input
    call Expect("(\<BS>").to_change_input_as('')
    call Expect("[\<BS>").to_change_input_as('')
    call Expect("{\<BS>").to_change_input_as('')
    call Expect("\"\<BS>").to_change_input_as('')
    call Expect("'\<BS>").to_change_input_as('')
  End

  It should not input the pair of double quote for Vim script's comment
    setf vim
    call Expect('"').to_change_input_as('"')
    call Expect('call("').to_change_input_as('call("")')
    call Expect('call "').to_change_input_as('call "')
  End

  It should add an extra space inside brackets and delete
    call Expect("( ").to_change_input_as("(  )")
    call Expect("{ ").to_change_input_as("{  }")
    call Expect("( \<BS>").to_change_input_as("()")
    call Expect("{ \<BS>").to_change_input_as("{}")
  End

  It should leave the extra space inside brackets
    call Expect("( x)").to_change_input_as("( x )")
    call Expect("{ foo bar}").to_change_input_as("{ foo bar }")
  End

  It should not input the pair of the single quote for some language's specification
    for ft in ['haskell', 'lisp', 'clojure', 'ocaml', 'scala']
      enew!
      execute 'setf ' . ft
      call Expect("'" . ft).to_change_input_as("'" . ft)
    endfor
  End

  It should leave the single quote in spite of preceeding \ for strong quote in some language
    for ft in ['vim', 'sh', 'csh', 'ruby', 'tcsh', 'zsh']
      enew!
      execute 'setf ' . ft
      call Expect("'" . ft . "\\'").to_change_input_as("'" . ft . "\\'")
    endfor
  End

  It with leave can repeat with dots
    for i in range(1, 3)
      call setline(i, '()(-)')
    endfor
    normal! gg2|
    execute "normal aHOGE(FUGA(PIYO), x(y\<Esc>"
    normal! j0.
    normal! j$.
    call Expect(['()HOGE(FUGA(PIYO), x(y))(-)', '(HOGE(FUGA(PIYO), x(y)))(-)', '()(-)HOGE(FUGA(PIYO), x(y))', ]).to_be_displayed()
  End

  It can repeat if CR input
    execute "normal oHOGE(\<CR>\<Esc>"
    normal! G.G.
    call Expect(['', 'HOGE(', '', ')', 'HOGE(', '', ')', 'HOGE(', '', ')']).to_be_displayed()
  End

  It can repeat if CR input with set smartindent
    setlocal smartindent
    execute "normal oHOGE(\<CR>\<Esc>"
    normal! G.G.
    call Expect(['', 'HOGE(', '', ')', 'HOGE(', '', ')', 'HOGE(', '', ')']).to_be_displayed()
    setlocal smartindent&
  End

  It automatically inputs pair braces with newline
    execute "normal aHOGE({\<CR>FUGA{\<CR>PIYO{\<CR>\<Esc>"
    call Expect(['HOGE({', 'FUGA{', 'PIYO{', '', '}', '}', '})']).to_be_displayed()
  End

  It automatically inputs pair braces with newline and set smartindent
    setlocal smartindent noexpandtab shiftwidth=4 tabstop=4
    execute "normal aHOGE({\<CR>FUGA{\<CR>PIYO{\<CR>\<Esc>"
    call Expect(['HOGE({', "\tFUGA{", "\t\tPIYO{", '',  "\t\t}", "\t}", '})']).to_be_displayed()
    setlocal smartindent&
  End

  It automatically inputs pair braces with newline and set indentexpr
    setlocal ft=ruby et sw=2
    execute "normal amodule Hoge\<CR>def piyo\<CR>foo {\<CR>\<Esc>"
    call Expect(['module Hoge', '  def piyo', '    foo {', '', '    }', '  end', 'end']).to_be_displayed()
    setlocal ft= et& sw&
  End

  It can move the cursor
    call Expect("HOGE(\"GA\<Left>\<Left>FU").to_change_input_as('HOGE("FUGA")')
  End

  It fixes the cursor position when escape the insertmode
    setlocal smartindent shiftwidth=2 expandtab
    call Expect("({\<CR>;").to_change_input_as("({\n  ;\n})")
    call Expect(line('.')).to_equal(2)
    call Expect(col('.')).to_equal(3)
  End

  It is disabled when buftype=nofile
    let g:lexima_disable_on_nofile = 1
    setlocal buftype=nofile
    call Expect('hoge((').to_change_input_as('hoge((')
  End

  It is disabled when b:lexima_disabled = 1
    let b:lexima_disabled = 1
    call Expect('hoge((').to_change_input_as('hoge((')
  End

End
